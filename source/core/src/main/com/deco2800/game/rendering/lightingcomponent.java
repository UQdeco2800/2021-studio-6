package com.deco2800.game.rendering;import box2dLight.PointLight;import box2dLight.RayHandler;import com.badlogic.gdx.graphics.Camera;import com.badlogic.gdx.graphics.g2d.SpriteBatch;import com.badlogic.gdx.graphics.Color;import com.badlogic.gdx.math.MathUtils;import com.badlogic.gdx.math.collision.Ray;import com.badlogic.gdx.physics.box2d.World;import com.badlogic.gdx.utils.Array;import com.deco2800.game.services.ServiceLocator;public class lightingcomponent implements Renderable {    public class lightSource {        float x;        float y;        float offset = MathUtils.random(50.0f);        public PointLight light;        public lightSource(RayHandler rayHandler) {            this.x = 10;            this.y = 10;            light = new PointLight(rayHandler, 100, Color.WHITE, 10f, this.x, this.y);        }    }    private RayHandler rayHandler;    private Array<lightSource> lights;    public lightingcomponent(World world) {        rayHandler = new RayHandler(world);        lights = new Array<>();        for(int i = 0; i < 1; i++){            lights.add(new lightSource(rayHandler));        }    }    public void setCamera(Camera camera) {        rayHandler.setCombinedMatrix(camera.combined, camera.position.x , camera.position.y, camera.viewportWidth * 1, camera.viewportHeight * 1 );    }    @Override    public void render(SpriteBatch batch) {        rayHandler.update();        rayHandler.render();        rayHandler.setAmbientLight(0.4f);    }    @Override    public float getZIndex() {        return 0f;    }    @Override    public int getLayer() {        return 12;    }    @Override    public int compareTo(Renderable renderable) {        return 1;    }}